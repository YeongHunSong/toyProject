<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="syh.toyproject.repository.mybatis.PostMapper">

    <sql id="searchCond">
        <if test="cond != null and cond.searchType == 'title' and cond.searchKeyword != ''">
            post.post_title LIKE CONCAT('%', #{cond.searchKeyword}, '%')
        </if>
        <if test="cond != null and cond.searchType == 'content' and cond.searchKeyword != ''">
            post.post_content LIKE CONCAT('%', #{cond.searchKeyword}, '%')
        </if>
        <if test="cond != null and cond.searchType == 'username' and cond.searchKeyword != ''">
            member.username LIKE CONCAT('%', #{cond.searchKeyword}, '%')
        </if>
    </sql>


    <insert id="addPost" useGeneratedKeys="true" keyProperty="postId">
        INSERT INTO post (writing_date, last_edit_date, post_title, post_content, member_id, view_count, recommend_count)
        VALUES (now(), now(), #{postTitle}, #{postContent}, #{memberId}, 0, 0)
    </insert>

    <update id="editPost">
        UPDATE post
        SET post_title = #{postEditDto.postTitle},
            post_content = #{postEditDto.postContent},
            last_edit_date = now() + 0.00001

        WHERE post_id = #{postId}
    </update>

    <select id="totalCount" resultType="int">
        SELECT COUNT(*)
        FROM post
        LEFT JOIN member
        ON post.member_id = member.member_id
        <where>
            <include refid="searchCond"/>
        </where>
    </select>
    
    <select id="totalCountByMemberId" resultType="int">
        SELECT COUNT(*)
        FROM post
        WHERE member_id = #{memberId}
    </select>
    
    <!-- ORDER BY post.post_id DESC -->
    <select id="findAll" resultType="Post">
        SELECT post.member_id, post.post_id, post.post_title, post.post_content, post.view_count,
        COUNT(recommend.post_id) recommend_count, post.writing_date, post.last_edit_date
        FROM post
        LEFT JOIN post_recommend AS recommend
        ON post.post_id = recommend.post_id
        LEFT JOIN member
        ON post.member_id = member.member_id
        <where>
            <include refid="searchCond"/>
        </where>
        GROUP BY post.post_id
        LIMIT #{pageDto.pageCount}, #{pageDto.pageView}
    </select>

    <select id="findByMemberIdAll" resultType="Post">
        SELECT writing_date, last_edit_date, post_title, post_content, member_id, post_id, view_count, recommend_count
        FROM post
        WHERE member_id = #{memberId}
        LIMIT #{pageDto.pageCount}, #{pageDto.pageView}
    </select>

    <select id="findByPostId" resultType="Post">
        SELECT post.member_id, post.post_id, post.post_title, post.post_content, post.view_count,
        COUNT(recommend.post_id) recommend_count, post.writing_date, post.last_edit_date
        FROM post
        LEFT JOIN post_recommend AS recommend
        ON post.post_id = recommend.post_id
        WHERE post.post_id = #{postId}
        GROUP BY post.post_id
        ORDER BY post.post_id
    </select>

    <delete id="deletePost">
        DELETE FROM post
        WHERE post_id = #{postId}
    </delete>

    <update id="addViewCount">
        UPDATE post
        SET view_count = view_count + 1
        WHERE post_id = #{postId}
    </update>

    <insert id="recommendPost">
        INSERT INTO post_recommend (post_id, recommender_id, recommend_date)
        VALUES (#{postId}, #{recommenderId}, now())
    </insert>

    <select id="recommendDuplicateCheck" resultType="Int">
        SELECT COUNT(recommender_id)
        FROM post_recommend
        WHERE post_id = #{postId}
        AND recommender_id = #{recommenderId}
    </select>

</mapper>