<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="syh.toyProject.repository.mybatis.PostMapper">

    <sql id="searchCond">
        <where>
            <if test="cond != null and cond.searchType == 'title' and cond.searchKeyword != ''">
                p.post_title LIKE CONCAT('%', #{cond.searchKeyword}, '%')
            </if>
            <if test="cond != null and cond.searchType == 'content' and cond.searchKeyword != ''">
                p.post_content LIKE CONCAT('%', #{cond.searchKeyword}, '%')
            </if>
            <if test="cond != null and cond.searchType == 'username' and cond.searchKeyword != ''">
                m.username LIKE CONCAT('%', #{cond.searchKeyword}, '%')
            </if>
        </where>
    </sql>

    <sql id="sorting">
        <choose>
            <when test="sortingDto != null and sortingDto.sorting == 'DESC'">
                ORDER BY p.writing_date DESC
            </when>
            <otherwise>
                ORDER BY p.writing_date ASC
            </otherwise>
        </choose>
    </sql>

    <sql id="paging">
        <if test="pageDto != null">
            LIMIT #{pageDto.pageCount}, #{pageDto.pageView}
        </if>
    </sql>

    <insert id="addPost" useGeneratedKeys="true" keyProperty="postId">
        INSERT INTO post (writing_date, last_edit_date, post_title, post_content, member_id, view_count)
        VALUES (now(), now(), #{postTitle}, #{postContent}, #{memberId}, 0)
    </insert>

    <update id="editPost">
        UPDATE post
        SET post_title = #{postEditDto.postTitle},
            post_content = #{postEditDto.postContent},
            last_edit_date = now() + 0.00001

        WHERE post_id = #{postId}
    </update>

    <select id="totalCount" resultType="int">
        SELECT COUNT(*)
        FROM post p
        LEFT JOIN member m ON p.member_id = m.member_id
        <include refid="searchCond"/>
    </select>
    
    <select id="totalCountByMemberId" resultType="int">
        SELECT COUNT(*)
        FROM post
        WHERE member_id = #{memberId}
    </select>
    
    <!-- ORDER BY post.post_id DESC -->
    <select id="findAll" resultType="Post">
        SELECT p.member_id, p.post_id, p.post_title, p.post_content, p.view_count,
               r.recommend_count, c.comment_count, p.writing_date, p.last_edit_date
        FROM post AS p
        INNER JOIN member m ON p.member_id = m.member_id
        LEFT JOIN
            (
                SELECT comment.post_id, COUNT(*) comment_count
                FROM comment
                GROUP BY comment.post_id
            ) AS c
        ON p.post_id = c.post_id
        LEFT JOIN
            (
                SELECT recommend.post_id, COUNT(*) recommend_count
                FROM post_recommend as recommend
                GROUP BY recommend.post_id
            ) AS r
        ON p.post_id = r.post_id
        <include refid="searchCond"/>
        <include refid="sorting"/>
        <include refid="paging"/>

<!--        SELECT post.member_id, post.post_id, post.post_title, post.post_content, post.view_count,-->
<!--        COUNT(recommend.post_id) recommend_count, COUNT(comment.post_id) comment_count,-->
<!--        post.writing_date, post.last_edit_date-->
<!--        FROM post-->
<!--        LEFT JOIN post_recommend recommend-->
<!--        ON post.post_id = recommend.post_id-->
<!--        LEFT JOIN member-->
<!--        ON post.member_id = member.member_id-->
<!--        LEFT JOIN comment-->
<!--        ON post.post_id = comment.post_id-->
<!--        <include refid="searchCond"/>-->
<!--        GROUP BY post.post_id-->
<!--        <include refid="sorting"/>-->
<!--        <include refid="paging"/>-->
    </select>

    <select id="findByMemberIdAll" resultType="Post">
        SELECT writing_date, last_edit_date, post_title, post_content, member_id, post_id, view_count
        FROM post
        WHERE member_id = #{memberId}
        <include refid="paging"/>
    </select>

    <select id="findByPostId" resultType="Post">
        SELECT p.member_id, p.post_id, p.post_title, p.post_content, p.view_count,
        COUNT(r.*) recommend_count, p.writing_date, p.last_edit_date
        FROM post p
        LEFT JOIN post_recommend AS r ON p.post_id = r.post_id
        WHERE p.post_id = #{postId}
        GROUP BY p.post_id
        ORDER BY p.post_id
    </select>

    <delete id="deletePost">
        DELETE FROM post
        WHERE post_id = #{postId}
    </delete>

    <update id="addViewCount">
        UPDATE post
        SET view_count = view_count + 1
        WHERE post_id = #{postId}
    </update>

    <insert id="recommendPost">
        INSERT INTO post_recommend (post_id, recommender_id, recommend_date)
        VALUES (#{postId}, #{recommenderId}, now())
    </insert>

    <select id="recommendDuplicateCheck" resultType="Int">
        SELECT COUNT(*)
        FROM post_recommend
        WHERE post_id = #{postId}
        AND recommender_id = #{recommenderId}
    </select>

</mapper>