<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="syh.toyProject.repository.mybatis.PostMapper">

    <sql id="searchCond">
        <where>
            <if test="cond != null and cond.searchType == 'title' and cond.searchKeyword != ''">
                P.POST_TITLE LIKE CONCAT('%', #{cond.searchKeyword}, '%')
            </if>
            <if test="cond != null and cond.searchType == 'content' and cond.searchKeyword != ''">
                P.POST_CONTENT LIKE CONCAT('%', #{cond.searchKeyword}, '%')
            </if>
            <if test="cond != null and cond.searchType == 'username' and cond.searchKeyword != ''">
                M.USERNAME LIKE CONCAT('%', #{cond.searchKeyword}, '%')
            </if>
        </where>
    </sql>

    <sql id="sorting">
        <choose>
            <when test="sortingDto != null and sortingDto.sorting == 'DESC'">
                ORDER BY
                    P.WRITING_DATE DESC
            </when>
            <otherwise>
                ORDER BY
                    P.WRITING_DATE ASC
            </otherwise>
        </choose>
    </sql>

    <sql id="paging">
        <if test="pageDto != null">
            LIMIT #{pageDto.pageCount}, #{pageDto.pageView}
        </if>
    </sql>

    <insert id="addPost" useGeneratedKeys="true" keyColumn="post_id" keyProperty="postId">
        INSERT INTO
            POST (WRITING_DATE, LAST_EDIT_DATE, POST_TITLE, POST_CONTENT, MEMBER_ID, VIEW_COUNT)
        VALUES
            (now(), now(), #{postTitle}, #{postContent}, #{memberId}, 0)
    </insert>

    <update id="editPost">
        UPDATE
            POST P
        SET
            P.POST_TITLE = #{postEditDto.postTitle}
            , P.POST_CONTENT = #{postEditDto.postContent}
            , P.LAST_EDIT_DATE = now() + 0.00001
        WHERE
            P.POST_ID = #{postId}
    </update>

    <select id="totalCount" resultType="int">
        SELECT
            COUNT(P.POST_ID)
        FROM
            POST P
        LEFT JOIN MEMBER M
            ON P.MEMBER_ID = M.MEMBER_ID
        <include refid="searchCond"/>
    </select>
    
    <select id="totalCountByMemberId" resultType="int">
        SELECT
            COUNT(P.POST_ID)
        FROM
            POST P
        WHERE
            P.MEMBER_ID = #{memberId}
    </select>
    
    <!-- ORDER BY post.post_id DESC -->
    <select id="findAll" resultType="Post">
        SELECT
            P.MEMBER_ID
            , P.POST_ID
            , P.POST_TITLE
            , P.POST_CONTENT
            , P.VIEW_COUNT
            , R.RECOMMEND_COUNT
            , C.COMMENT_COUNT
            , P.WRITING_DATE
            , P.LAST_EDIT_DATE
        FROM
            POST P
        INNER JOIN MEMBER M
            ON P.MEMBER_ID = M.MEMBER_ID
        LEFT JOIN
            (
                SELECT
                    POST_ID
                    , COUNT(A.COMMENT_ID) COMMENT_COUNT
                FROM
                    COMMENT A
                GROUP BY
                    POST_ID
            ) AS C
            ON P.POST_ID = C.POST_ID
        LEFT JOIN
            (
                SELECT
                    POST_ID
                    , COUNT(B.POST_ID) RECOMMEND_COUNT
                FROM
                    POST_RECOMMEND B
                GROUP BY
                    POST_ID
            ) AS R
            ON P.POST_ID = R.POST_ID
        <include refid="searchCond"/>
        <include refid="sorting"/>
        <include refid="paging"/>

<!--        SELECT post.member_id, post.post_id, post.post_title, post.post_content, post.view_count,-->
<!--        COUNT(recommend.post_id) recommend_count, COUNT(comment.post_id) comment_count,-->
<!--        post.writing_date, post.last_edit_date-->
<!--        FROM post-->
<!--        LEFT JOIN post_recommend recommend-->
<!--        ON post.post_id = recommend.post_id-->
<!--        LEFT JOIN member-->
<!--        ON post.member_id = member.member_id-->
<!--        LEFT JOIN comment-->
<!--        ON post.post_id = comment.post_id-->
<!--        <include refid="searchCond"/>-->
<!--        GROUP BY post.post_id-->
<!--        <include refid="sorting"/>-->
<!--        <include refid="paging"/>-->
    </select>

    <select id="findByMemberIdAll" resultType="Post">
        SELECT
            P.WRITING_DATE
            , P.LAST_EDIT_DATE
            , P.POST_TITLE
            , P.POST_CONTENT
            , P.MEMBER_ID
            , P.POST_ID
            , P.VIEW_COUNT
        FROM
            POST P
        WHERE
            P.MEMBER_ID = #{memberId}
        ORDER BY
            WRITING_DATE DESC
        <include refid="paging"/>
    </select>

    <select id="findByPostId" resultType="Post">
        SELECT
            P.MEMBER_ID
            , P.POST_ID
            , P.POST_TITLE
            , P.POST_CONTENT
            , P.VIEW_COUNT
            , COUNT(R.POST_ID) RECOMMEND_COUNT
            , P.WRITING_DATE
            , P.LAST_EDIT_DATE
        FROM
            POST P
        LEFT JOIN POST_RECOMMEND R
            ON P.POST_ID = R.POST_ID
        WHERE
            P.POST_ID = #{postId}
    </select> <!--COUNT 부분을 COUNT(*) 로 할 경우 null 도 카운팅에 들어가 값의 오류 발생. -->

    <delete id="deletePost">
        DELETE FROM
            POST P
        WHERE
            P.POST_ID = #{postId}
    </delete>

    <update id="addViewCount">
        UPDATE
            POST P
        SET
            P.VIEW_COUNT = P.VIEW_COUNT + 1
        WHERE
            P.POST_ID = #{postId}
    </update>

    <insert id="recommendPost">
        INSERT INTO
            POST_RECOMMEND (POST_ID, RECOMMENDER_ID, RECOMMEND_DATE)
        VALUES
            (#{postId}, #{recommenderId}, now())
    </insert>

    <select id="recommendDuplicateCheck" resultType="Int">
        SELECT
            COUNT(R.POST_ID)
        FROM
            POST_RECOMMEND R
        WHERE
            R.POST_ID = #{postId}
        AND
            R.RECOMMENDER_ID = #{recommenderId}
    </select>

</mapper>